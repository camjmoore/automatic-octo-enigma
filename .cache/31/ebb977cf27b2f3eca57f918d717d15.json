{"id":"shaders/vertexShader.js","dependencies":[{"name":"C:\\Users\\Cameron\\Desktop\\3d-web\\automatic-octo-enigma\\package.json","includedInParent":true,"mtime":1606188528563}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = vertexShader;\n\nfunction vertexShader() {\n  return \"\\n    uniform float time;\\n    varying vec2 vUv;\\n    varying vec3 vPosition;\\n    uniform vec2 pixels;\\n    float PI = 3.141592653589793238;\\n    void main() {\\n        vUv = (uv - vec2(0.5))*0.9 + vec2(0.5);\\n        vec3 pos = position;\\n        pos.y += sin(PI*uv.x)*-0.05;\\n        pos.z += sin(PI*uv.x)*0.1;\\n        pos.y += sin(time*0.7)*0.02;\\n        vUv.y -= sin(time*0.7)*0.02;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\\n    }\\n  \";\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"shaders/vertexShader.js","original":{"line":1,"column":15}},{"name":"vertexShader","generated":{"line":8,"column":9},"source":"shaders/vertexShader.js","original":{"line":1,"column":24}},{"generated":{"line":8,"column":21},"source":"shaders/vertexShader.js","original":{"line":1,"column":15}},{"generated":{"line":8,"column":24},"source":"shaders/vertexShader.js","original":{"line":1,"column":39}},{"generated":{"line":9,"column":0},"source":"shaders/vertexShader.js","original":{"line":2,"column":2}},{"generated":{"line":10,"column":0},"source":"shaders/vertexShader.js","original":{"line":18,"column":1}}],"sources":{"shaders/vertexShader.js":"export default function vertexShader() {\r\n  return `\r\n    uniform float time;\r\n    varying vec2 vUv;\r\n    varying vec3 vPosition;\r\n    uniform vec2 pixels;\r\n    float PI = 3.141592653589793238;\r\n    void main() {\r\n        vUv = (uv - vec2(0.5))*0.9 + vec2(0.5);\r\n        vec3 pos = position;\r\n        pos.y += sin(PI*uv.x)*-0.05;\r\n        pos.z += sin(PI*uv.x)*0.1;\r\n        pos.y += sin(time*0.7)*0.02;\r\n        vUv.y -= sin(time*0.7)*0.02;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\r\n    }\r\n  `\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"3fc96cd9fe888566ce36a48e8aadcff1","cacheData":{"env":{}}}